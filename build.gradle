import groovy.swing.SwingBuilder

import javax.swing.*
import java.awt.*

buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
        classpath 'org.spongepowered:mixingradle:0.7+'
        classpath 'org.codehaus.groovy:groovy-swing:latest.release'
    }
}

plugins {
    id 'com.matthewprenger.cursegradle' version 'latest.release'
}

ext {
    PARCHMENT_VER = parchmentVer + "-" + mcVer
    FORGE_VERSION = mcVer + "-" + forgeVer
    noSpaceName = projectName.replaceAll(" ", "")
    lowerName = noSpaceName.toLowerCase()
    useOfficialMappings = Boolean.parseBoolean(useOfficialMappings)
    useMixins = Boolean.parseBoolean(useMixins)
    useAT = Boolean.parseBoolean(useAT)
    cfEnabled = Boolean.parseBoolean(cfEnabled)
    mcVersions = mcVersions.replaceAll(" ", "").split(",")
}

if (file("local.properties").exists()) {
    def localProperties = new Properties()
    localProperties.load(new FileInputStream(rootProject.file("local.properties")))
    localProperties.each { prop -> project.ext.set(prop.key, prop.value) }
}

apply plugin: 'net.minecraftforge.gradle'
if (!useOfficialMappings) {
    apply plugin: 'org.parchmentmc.librarian.forgegradle'
}
if (useMixins) {
    apply plugin: 'org.spongepowered.mixin'

    def path = "src/resources/" + noSpaceName + ".mixins.json"
    if (!file(path).exists()) {
        def dir = "src/main/java/com/ocraftyone/" + lowerName + "/mixin/"
        mkdir(dir)
        def mixinFile = file(path)
        mixinFile.createNewFile()
        def templateFile = file("setup/template.mixins.json")
        mixinFile.write(String.join("\n", templateFile.readLines()).replaceAll("mixinpkg", "com.ocraftyone." + lowerName + ".mixin").replaceAll("refmappath", lowerName + ".refmap.json"))
        exec {
            executable "git"
            args "add", path
        }
    }
}

if (!file("setup/gen.lock").exists()) {
    def dir = "src/main/java/com/ocraftyone/" + lowerName
    mkdir(dir)
// Create main java file
    def pathToJavaFile = dir + "/" + noSpaceName + ".java"
    def mainJavaFile = file(pathToJavaFile)
    if (!mainJavaFile.exists()) {
        mainJavaFile.createNewFile()
        def templateString = ""
        templateString = String.join("\n", file("setup/ModSetup.java").readLines())
        mainJavaFile.write(templateString.replaceAll("pkgname", lowerName).replaceAll("ModSetup", noSpaceName))
    }


//  Create mods.toml
    dir = "src/main/resources/META-INF"
    mkdir(dir)
    def pathToModsFile = dir + "/mods.toml"
    def modsFile = file(pathToModsFile)
    if (!modsFile.exists()) {
        modsFile.createNewFile()
        templateString = String.join("\n", file("setup/mods.toml").readLines())
        modsFile.write(templateString.replaceAll("MODID", lowerName).replaceAll("DISPLAYNAME", projectName).replaceAll("mcVerRange", mcVerRange).replaceAll("loadVer", minLoaderVer))
    }

//  Add files to git
    exec {
        executable "git"
        args "add", pathToJavaFile, pathToModsFile
    }
    file("setup/gen.lock").createNewFile()
}

group = 'com.ocraftyone'
version = "forge-" + jarMCVer + "-" + buildVer

java {
    archivesBaseName = lowerName
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

minecraft {
    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // snapshot   YYYYMMDD   Snapshot are built nightly.
    // stable     #          Stables are built at the discretion of the MCP team.
    // official   MCVersion  Official field/method names from Mojang mapping files
    //
    // You must be aware of the Mojang license when using the 'official' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Use non-default mappings at your own risk. They may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    if (useOfficialMappings) {
        println("Using official MC mappings")
        mappings channel: 'official', version: mcVer
    } else {
        println "Using Parchment mappings version " + PARCHMENT_VER
        mappings channel: 'parchment', version: PARCHMENT_VER
    }

    if (useAT) {
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    }

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/removed as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', lowerName

            mods {
                "$lowerName" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/removed as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', lowerName

            mods {
                "$lowerName" {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', lowerName

            mods {
                "$lowerName" {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/removed as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', lowerName, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                "$lowerName" {
                    source sourceSets.main
                }
            }
        }
    }
}

if (useMixins) {
    mixin {
        add sourceSets.main, lowerName + ".refmap.json"
        config noSpaceName + ".mixins.json"
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you

    mavenCentral()

    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
    // flatDir {
    //     dir 'libs'
    // }
}

dependencies {
    // Specify the version of Minecraft to use. If this is any group other than 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency, and its patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:' + FORGE_VERSION

    // Real mod deobf dependency examples - these get remapped to your current mappings
    // compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api") // Adds JEI API as a compile dependency
    // runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}") // Adds the full JEI mod as a runtime dependency
    // implementation fg.deobf("com.tterrag.registrate:Registrate:MC${mc_version}-${registrate_version}") // Adds registrate as a dependency

    runtimeOnly fg.deobf("mezz.jei:jei-${mcVer}:9.7.1.232")

    // Examples using mod jars from ./libs
    // implementation fg.deobf("blank:coolmod-${mc_version}:${coolmod_version}")

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

    if (useMixins) {
        annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    }
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : lowerName,
                "Specification-Vendor"    : "Ocraftyone",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : buildVer,
                "Implementation-Vendor"   : "Ocraftyone",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

createMcpToSrg.finalizedBy("genIntellijRuns")
createSrgToMcp.finalizedBy("genIntellijRuns")

if (cfEnabled) {
    if (!file("local.properties").exists()) {
        propFile = file("local.properties")
        propFile.createNewFile()
        propFile.write("apiToken=")
    }

    tasks.register "publishToCurseforge", {
        group "publish"
        def finalChangelog = ""
        doFirst {
            var success = false
            new SwingBuilder().edt {
                dialog(modal: true,
                        title: "Enter upload details",
                        alwaysOnTop: true,
                        resizable: false,
                        locationRelativeTo: null,
                        pack: true,
                        show: true,
                        defaultCloseOperation: JFrame.DISPOSE_ON_CLOSE) {
                    panel(layout: new GridLayout(3, 1)) {
                        label(text: "Changelog")
                        scrollPane {
                            changelog = textArea(rows: 6, columns: 30)
                        }

                        panel {
                            button(text: "OK", actionPerformed: {
                                finalChangelog = changelog.text
                                if (!finalChangelog.isEmpty()) {
                                    success = true
                                    file("changelog.txt").write(finalChangelog)
                                }
                                dispose()
                            })
                            button(text: "Cancel", actionPerformed: {
                                println "Cancelled"
                                dispose()
                            })
                        }
                    }
                }
                if (!success) {
                    throw new GradleException("Upload Cancelled")
                }
            }
        }
    }

    curseforge {
        apiKey = apiToken
        project {
            id = projectID
            mainArtifact jar
            changelog = file("changelog.txt")
            releaseType = "release"
            Arrays.stream(mcVersions).forEachOrdered { String version ->
                addGameVersion version
            }
        }
    }

    publishToCurseforge.finalizedBy "curseforge"
}
